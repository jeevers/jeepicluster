---
- hosts: k8s_worker
  become: true
  tasks:
      - name: create docker config dir
        file:
            path: "{{ansible_env.HOME}}/.docker"
            state: directory
            mode: 0700
        when: vault_gcp_svc_acct is defined
        tags:
            - docker_registry
            - gcr_login
      - name: set gcr registry credentials
        template:
            src: "dockercfg.json.j2"
            #dest: "/var/lib/kubelet/config.json"
            dest: "{{ansible_env.HOME}}/.docker/config.json"
            mode: 0600
        when: vault_gcp_svc_acct is defined
        tags:
            - docker_registry
            - gcr_login
      - name: k8s_worker | enable passing bridge traffic to iptables
        sysctl:
            name: net.bridge.bridge-nf-call-iptables
            value: 1
            state: present
      - name: k8s_worker | create configuration directories
        file:
            path: "{{item}}"
            state: directory
        with_items:
            - "/etc/cni/net.d"
            - "/opt/cni/bin"
            - "/var/lib/kubelet"
            - "/var/lib/kube-proxy"
            - "/var/lib/kubernetes"
            - "/var/run/kubernetes"
      - name: k8s_worker | download kubernetes binaries
        get_url:
            url: "https://storage.googleapis.com/kubernetes-release/release/v{{k8s.version}}/bin/{{k8s.os[ansible_system]}}/{{k8s.arch[ansible_architecture]}}/{{item}}"
            dest: "/usr/local/bin/{{item}}"
            mode: 0755
        with_items:
            - "kubectl"
            - "kube-proxy"
            - "kubelet"
        tags:
            - dl_bins
        when: not update | default(false)
      - name: k8s_worker | update kubernetes binaries
        get_url:
            url: "https://storage.googleapis.com/kubernetes-release/release/v{{k8s.version}}/bin/{{k8s.os[ansible_system]}}/{{k8s.arch[ansible_architecture]}}/{{item}}"
            dest: "/usr/local/bin/{{item}}"
            mode: 0755
            force: yes
        with_items:
            - "kubectl"
            - "kube-proxy"
            - "kubelet"
        tags:
            - dl_bins
        when: update | default(false)
        notify:
            - restart kubelet
            - restart kube-proxy
      - name: k8s_worker | download and extract cni binaries
        unarchive:
            src: "https://github.com/containernetworking/plugins/releases/download/v{{k8s.cni_version}}/cni-plugins-{{k8s.arch[ansible_architecture]}}-v{{k8s.cni_version}}.tgz"
            dest: "/opt/cni/bin/"
            remote_src: true
        notify:
            - restart kubelet
      - name: k8s_worker | install additonal packages
        package:
            name:
                - socat
            state: installed
      - name: k8s_worker | generate cni config
        template:
            src: "{{item}}.j2"
            dest: "/etc/cni/net.d/{{item}}"
        with_items:
            - "10-bridge.conf"
            - "99-loopback.conf"
        when: "{{k8s.cni_config |default(false)}}"
      - name: k8s_worker | copy kubelet kubeconfig
        copy:
            src: "{{k8s.ca_config.cert_dir}}/{{ansible_hostname}}.kubeconfig"
            dest: "/var/lib/kubelet/kubeconfig"
        notify:
            - restart kubelet
      - name: k8s_worker | copy kube-proxy kubeconfig
        copy:
            src: "{{k8s.ca_config.cert_dir}}/kube-proxy.kubeconfig"
            dest: "/var/lib/kube-proxy/kubeconfig"
        notify:
            - restart kube-proxy
      - name: k8s_worker | copy host certs to node
        copy:
            src: "{{k8s.ca_config.cert_dir}}/{{item}}"
            dest: "/var/lib/kubelet/"
        with_items:
            - "{{ansible_hostname}}.pem"
            - "{{ansible_hostname}}-key.pem"
        notify:
            - restart kubelet
      - name: k8s_worker | copy host certs to node
        copy:
            src: "{{k8s.ca_config.cert_dir}}/{{item}}"
            dest: "/var/lib/kubernetes/"
        with_items:
            - "ca.pem"
        notify:
            - restart kubelet
      - name: k8s_controller | gather info about the etcd cluster nodes
        setup:
        delegate_to: "{{item}}"
        delegate_facts: true
        with_items: "{{groups['k8s_controller']}}"
      - name: k8s_worker | generate kubelet service config
        template:
            src: "kubelet.service.j2"
            dest: "/etc/systemd/system/kubelet.service"
        notify:
            - systemd reload daemon
            - restart kubelet
      - name: k8s_worker | generate kube-proxy service config
        template:
            src: "kube-proxy.service.j2"
            dest: "/etc/systemd/system/kube-proxy.service"
        notify:
            - systemd reload daemon
            - restart kube-proxy
      - name: k8s_worker | enable and start services
        service:
            name: "{{item}}"
            enabled: true
            state: started
        with_items:
            - kubelet
            - kube-proxy
  handlers:
      - name: systemd reload daemon
        systemd:
            daemon_reload: true
        when: ansible_service_mgr == "systemd"
      - name: restart kubelet
        service:
            name: kubelet
            state: restarted
      - name: restart kube-proxy
        service:
            name: kube-proxy
            state: restarted
